pkgs <- c("reshape2", "ggplot2", "igraph", "sna", "bipartite", "devtools", "car", "lme4", "RCurl", "grid")
install.packages(pkgs, dependencies = T)
install.packages("ddplyr", dependencies = T)
install.packages("plyr", dependencies = T)
require(devtools)
## Loading required package: devtools
require(ggplot2)
## Loading required package: ggplot2
require(RCurl)
## Loading required package: RCurl
## Loading required package: bitops
if (!require(plotly)) {
install_github("plotly", "ropensci")
}
install.packages("animation", dependencies = T)
install.packages("NEtIndices", dependencies = T)
install.packages("NetIndices", dependencies = T)
install.packages("roxygen2", dependencies = T)
install_github("klutometis/roxygen")
require(devtools)
install_github("klutometis/roxygen")
require(devtools)
require(devtools)
install.packages("Rtools", dependencies = T)
install_github("klutometis/roxygen")
??roxygen2
install.packages("numDeriv")
require(numDeriv)
?jacobian
f <- function(P1, P2){
(w1*P1)/(w1*P1 + w2*P2)
}
jacobian(f)
f <- function(P1, P2){
(.5*P1)/(.5*P1 + .5*P2)
}
jacobian(f)
jacobian(f, x = 1:10)
jacobian(f, 1:10, 1:10)
jacobian(f, P1 = 1:10, P2 = 1:10)
jacobian(f, x = 1:10, P2 = 1:10)
f <- function(p1, p2, w1, w2){
dn <- (w1*p1)/(w1*p1 + w2*p2) + (w2*p2)/(w2*p2 + w1*p1)
return(dn)
}
jacobian(f)
jacobian(f, 1:10)
jacobian(f, w1 = 1:10)
?deriv
deriv(f)
deriv((w1*p1)/(w1*p1 + w2*p2))
deriv((w1*p1)/(w1*p1 + w2*p2), name = p2)
getwd()
setwd("C:/Users/borre_000/Desktop/GitHub/Food-Chain-Length/WholeWebSim/")
load("chainINFO.Rdata")
ggplot(totalDAT, aes(x = MedTL, y = QSS)) + geom_point(aes(col = ints)) + geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
require(ggplot2)
ggplot(totalDAT, aes(x = MedTL, y = QSS)) + geom_point(aes(col = ints)) + geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MedTL, y = QSS)) + geom_point(aes(col = ints)) + geom_smooth(aes(col = ints), method = "loess") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MedTL, y = QSS))  + geom_smooth(aes(col = ints), method = "loess") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MedTL, y = QSS)) + geom_point(aes(col = ints)) + geom_smooth(aes(lty = ints), method = "loess") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MedTL, y = QSS)) +  geom_smooth(aes(lty = ints), method = "glm") + facet_wrap(~scenario)
levels(totalDAT$scenario)
levels(totalDAT$scenario)[c(3,5,7)]
geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario[c(3,5,7)])
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario[c(3,5,7)])
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") + facet_wrap(.~scenario[c(3,5,7)])
l <- levels(totalDAT$scenario)[c(3,5,7)]
ggplot(totalDAT[totalDAT$scenario == l], aes(x = MeanTL, y = QSS)) + geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT[totalDAT$scenario == l,], aes(x = MeanTL, y = QSS)) + geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(col = ints)) + geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
sym <- levels(totalDAT$scenario)[c(3,5,7)]
asymHI <- levels(totalDAT$scenario)[]
levels(totalDAT$scenario)[]
asymHI <- levels(totalDAT$scenario)[c(1,9)]
ggplot(totalDAT[totalDAT$scenario == asymHI,], aes(x = MeanTL, y = QSS)) + geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT[totalDAT$scenario == asymHI,], aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints)) +
geom_smooth(aes(lty = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT[totalDAT$scenario == asymHI,], aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = scenario)) +
geom_smooth(aes(lty = scenario), method = "glm") + facet_wrap(~ints)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = scenario)) +
geom_smooth(aes(lty = scenario), method = "glm") + facet_wrap(~ints)
ggplot(totalDAT[totalDAT$scenario == asymHI,], aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = scenario)) +
geom_smooth(aes(lty = scenario), method = "glm") + facet_wrap(~ints)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints)) +
geom_smooth(aes(lty = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) +
geom_smooth(aes(lty = ints), method = "glm") + facet_wrap(~scenario)
getwd()
ggsave("meantlPLOT3.png", width = 9, height = 7, dpi = 600)
ggsave("meantlPLOT3.svg", width = 9, height = 7, dpi = 600)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1)
geom_smooth(aes(lty = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints, size = 1))
geom_smooth(aes(lty = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1) +
geom_smooth(aes(lty = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1) +
geom_smooth(aes(lty = ints, lwd = 2.5), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1) +
geom_smooth(aes(lty = ints, lwd = 2), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1) +
geom_smooth(aes(lty = ints, lwd = 1.5), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1) +
geom_smooth(aes(lty = ints), lwd = 1.5, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1) +
geom_smooth(aes(lty = ints), lwd = 1.25, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 3) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1,5) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
totalDAT$ints
totalDAT$ints[c(4,5)]
ggplot(totalDAT[-totalDAT$ints == c("24","28"),], aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
totalDAT[-totalDAT$ints == c("24","28"),]
totalDAT[-totalDAT$ints == c("24","28"),]
ggplot(totalDAT[!totalDAT$ints == c("24","28"),], aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
totalDAT$ints == c("24","28"),]
totalDAT$ints == c("24","28")
x=totalDAT[!totalDAT$ints == c("24","28"),]
ggplot(x, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
dim(x)
32400+1800
32400+1800*5
x=totalDAT[1:34200,]
ggplot(x, aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
levels(totalDAT$ints)
levels(totalDAT$ints)[c(1,2,3)]
l <- levels(totalDAT$ints)[c(1,2,3)]
ggplot(totalDAT[totalDAT$ints == l], aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) + geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") + facet_wrap(~scenario)
12/45
12/100
12/90
16/90
20/90
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) +
geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") +
scale_shape_identity(name = "Number of\nInteractions")
facet_wrap(~scenario)
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) +
geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") +
scale_shape_identity(name = "Number of\nInteractions") +
facet_wrap(~scenario)
names(totalDAT)
names(totalDAT$ints)
plot(1:10, 2:15)
plot(1:10, 2:12)
plot(1:10, 2:11)
dev.off(
)
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) +
geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") +
scale_shape_identity(name = "Number of\nInteractions") +
facet_wrap(~scenario)
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) +
geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") +
theme_bw() +
facet_wrap(~scenario)
?by
by(totalDAT, ints, max)
by(totalDAT, list(scenario,ints), max)
by(totalDAT, list(totalDAT$scenario,totalDAT$ints), max)
by(totalDAT$qss, list(totalDAT$scenario,totalDAT$ints), max)
head(totalDAT)
by(totalDAT$QSS, list(totalDAT$scenario,totalDAT$ints), max)
tapply(totalDAT$QSS, list(totalDAT$scenario,totalDAT$ints), max)
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) +
geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") +
theme_bw() + xlab("Mean Trophic Postion") + ylab("Quasi Sign-Stability")
facet_wrap(~scenario)
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) +
geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") +
theme_bw() + xlab("Mean Trophic Postion") + ylab("Quasi Sign-Stability") +
facet_wrap(~scenario)
ggsave("meantlPLOT3.svg", width = 9, height = 7, dpi = 600)
ggsave("meantlPLOT3.png", width = 9, height = 7, dpi = 600)
dev.off()
ggplot(totalDAT[totalDAT$ints == l,], aes(x = MeanTL, y = QSS)) +
geom_point(aes(shape = ints), size = 1.5, alpha = .75) +
geom_smooth(aes(lty = ints), lwd = 1, method = "glm") +
theme_bw() + xlab("Mean Trophic Postion") + ylab("Quasi Sign-Stability") +
facet_wrap(~scenario)
ggsave("meantlPLOT3.png", width = 9, height = 7, dpi = 600)
require(RCurl)
require(igraph)
require(reshape2)
require(ggplot2)
require(grid)
require(devtools)
web.diameters.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
install_github("hadley/devtools")
install.packages("devtools")
install.packages("devtools")
detach("package:devtools", unload=TRUE)
install.packages("devtools")
install.packages("devtools")
require(devtools)
find_rtools()
library(devtools)
web.diameters.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
require(RCurl)
require(igraph)
require(ggplot2)
require(reshape2)
require(grid)
require(devtools)
web.diameters.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
web.diameters.URL <- getURL("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
web.diameters <- read.csv("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
web.diameters
web.diameters <- read.csv("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv", row.names = 1)
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2.5, 9.5, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot <- diam.plot + scale_x_continuous(name = "Longest Chain Length", breaks = 0:9)
diam.plot
sign2<-matrix(c(-1,-1,1,0),nrow=2,ncol=2)
diag(sign2)<--1
sign3<-matrix(c(-1,-1,-1,1,0,-1,1,1,0),nrow=3,ncol=3)
diag(sign3)<--1
sign4<-matrix(nrow=4,ncol=4)
sign4[lower.tri(sign4)]<--1
sign4[upper.tri(sign4)]<-1
diag(sign4)<--1
sign5<-matrix(nrow=5,ncol=5)
sign5[upper.tri(sign5)]<-1
sign5[lower.tri(sign5)]<--1
diag(sign5)<--1
sign6<-matrix(nrow=6,ncol=6)
sign6[lower.tri(sign6)]<--1
sign6[upper.tri(sign6)]<-1
diag(sign6)<--1
sign.matrices<-list(sign2,sign3,sign4,sign5,sign6)
names(sign.matrices)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
sign.matrices
graph.chains<-lapply(sign.matrices,graph.adjacency)
twospec2<-matrix(c(1,1,
2,2),nrow=2,ncol=2,byrow=T)
threespec2<-matrix(c(1,1,
3,1,
2,2),nrow=3,ncol=2,byrow=T)
fourspec2<-matrix(c(1,1,
2,2,
0,2,
1,3),nrow=4,ncol=2,byrow=T)
fivespec2<-matrix(c(2,1,
3,2,
1,2,
3,3,
1,3),nrow=5,ncol=2,byrow=T)
sixspec2<-matrix(c(2,1,
3,2,
1,2,
3,3,
1,3,
2,4),nrow=6,ncol=2,byrow=T)
layouts<-list(twospec2,threespec2,fourspec2,fivespec2,sixspec2)
text<-c("a","b","c","d","e")
for(i in 1:5){
E(graph.chains[[i]])$color = "darkslategray4"
E(graph.chains[[i]], path = c(1:(i+1)))$color = "darkslategrey"
}
par(mfrow=c(5, 1),mar=c(.5, .5, .5, .5))
for(i in 1:5){
plot.igraph(graph.chains[[i]], layout = layouts[[i]],
vertex.size = 40,
vertex.color = "black",
vertex.label.color = "white",
vertex.label.cex = 1.5,
edge.width = 3,
edge.arrow.size = .75,
frame = T)
text(2, 1, label = text[i], cex = 1.5)
}
analyze.eigen<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-1,0),NA)
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(Re(eigen(m)$values))
return(ev)
}
set.seed(5)
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(eigenvalues[[i]]<0)/10000
}
names(eigenvalues)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss
plot(unlist(qss)~c(2,3,4,5,6),
ylim=c(0,1), typ="o", lty=2, pch=21, bg="black",
xlab="Number of Trophic Levels",
ylab="QSS")
dev.off()
plot(unlist(qss)~c(2,3,4,5,6),
ylim=c(0,1), typ="o", lty=2, pch=21, bg="black",
xlab="Number of Trophic Levels",
ylab="QSS")
plot(unlist(qss)~c(2,3,4,5,6),
ylim=c(0,1), typ="o", lty=2, pch=21, bg="black",
xlab="Number of Trophic Levels",
ylab="QSS")
trophic.properties.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/NodeProperties.csv")
trophic.properties <- read.csv("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/NodeProperties.csv", row.names = T)
trophic.properties <- read.csv("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/NodeProperties.csv", row.names = 1)
consumers <- which(round(trophic.properties$TL, 6) >= 2)
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
```
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot
head(trophic.properties)
consumers
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..))
tc.plot <- tc.plot + geom_histogram(binwidth = .8, xlab = "Trophic Position", ylab = "Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(binwidth = .8, xlab = "Trophic Position", ylab = "Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot
tc.plot + geom_histogram(binwidth = .8, xlab = "Trophic Position", ylab = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot + geom_histogram(stat = "identity",binwidth = .8, xlab = "Trophic Position", ylab = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(stat = "identity", binwidth = .8, xlab = "Trophic Position", ylab = "Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..))
tc.plot <- tc.plot + geom_histogram(stat = "identity", binwidth = .8, xlab = "Trophic Position", ylab = "Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot
is.data.frame(trophic.properties[consumers,])
ggplot(trophic.properties[consumers,], aes(x = TL)) + geom_histogram()
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL)) + geom_histogram(binwidth = .8)
tc.plot
ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..)) + geom_histogram(binwidth = .8)
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..))# + geom_histogram(binwidth = .8)
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..))# + geom_histogram(binwidth = .8)
tc.plot <- tc.plot + geom_histogram(binwidth = .8, xlab = "Trophic Position", ylab = "Density")
tc.plot
l or higher than 2
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..))# + geom_histogram(binwidth = .8)
tc.plot <- tc.plot + geom_histogram(binwidth = .8)
tc.plot
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..))
tc.plot <- tc.plot + geom_histogram(binwidth = .8) + xlab("Trophic Position") + ylab("Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..))
tc.plot <- tc.plot + geom_histogram(binwidth = .8) + xlab("Trophic Position") + ylab("Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18)) + theme_bw()
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL, y = ..density..)) + theme_bw()
tc.plot <- tc.plot + geom_histogram(binwidth = .8) + xlab("Trophic Position") + ylab("Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
qss
qss.plot <- qplot(2:6, unlist(qss), xlab = "Number of Trophic Levels", margin = T)
qss.plot
qss.plot <- qplot(2:6, unlist(qss), xlab = "Number of Trophic Levels", margin = T)
qss.plot <- qss.plot + geom_point(size = 4)
qss.plot <- qss.plot + geom_line()
qss.plot <- qss.plot + theme(legend.title = element_blank())
qss.plot <- qss.plot + theme(legend.key.size = unit(2, "cm"), legend.text = element_text(size = 20))
qss.plot <- qss.plot + theme(axis.title.x = element_text(size=25))
qss.plot <- qss.plot + theme(axis.title.y = element_text(size=25))
qss.plot <- qss.plot + theme(axis.text.x = element_text(size=18))
qss.plot <- qss.plot + theme(axis.text.y = element_text(size=18))
qss.plot
qss.plot <- qplot(2:6, unlist(qss), xlab = "Number of Trophic Levels", ylab = "Quasi Sign-
Stability", margin = T)
qss.plot <- qss.plot + geom_point(size = 4)
qss.plot <- qss.plot + geom_line()
qss.plot <- qss.plot + theme(axis.title.x = element_text(size=25))
qss.plot <- qss.plot + theme(axis.title.y = element_text(size=25))
qss.plot <- qss.plot + theme(axis.text.x = element_text(size=18))
qss.plot <- qss.plot + theme(axis.text.y = element_text(size=18))
qss.plot
qss.plot <- qplot(2:6, unlist(qss), xlab = "Number of Trophic Levels", ylab = "Quasi Sign-
Stability", margin = T)
qss.plot <- qss.plot + geom_point(size = 4)
qss.plot <- qss.plot + geom_line()
qss.plot <- qss.plot + theme(axis.title.x = element_text(size=22))
qss.plot <- qss.plot + theme(axis.title.y = element_text(size=22))
qss.plot <- qss.plot + theme(axis.text.x = element_text(size=18))
qss.plot <- qss.plot + theme(axis.text.y = element_text(size=18))
qss.plot
getwd()
web.diameters <- read.csv("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv", row.names = 1)
getURL("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
getURL("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
web.diameters <- read.csv(text = url, row.names = 1)
web.diameters <- read.csv(url, row.names = 1)
web.diameters <- read.table(url, row.names = 1)
web.diameters <- read.table(text = url, row.names = 1)
url
rm(url)
Diam.url <- getURL("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
web.diameters <- read.table(text = Diam.url, row.names = 1)
web.diameters <- read.table("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv", row.names = 1)
path <- "https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/NodeProperties.csv"
read.csv(path)
read.csv(path, row.names = T)
web.diameters <- read.csv(path, row.names = 1)
head(web.diameters)
path2 <- "https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/NodeProperties.csv"
trophic.properties <- read.csv(path2, row.names = 1)
trophic.properties
path2 <- getURL("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/NodeProperties.csv")
path2
trophic.properties <- read.csv(text = path2, row.names = 1)
head(trophic.properties)
?getURL
head(web.diameters)
