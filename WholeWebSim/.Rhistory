triad.count <- lapply(graph.lists, triad.census)
triad.count
motif_counter(test1, names(mot.lst))
triad.count
triad.matrix
triad.matrix <- matrix(unlist(triad.count), nrow = length(graph.lists), ncol = 16, byrow = T)
triad.matrix
colnames(triad.matrix) <- c("empty", "single", "mutual", "s5", "s4", "s1", "d4",
"d3", "s2", "s3","d8", "d2", "d1", "d5", "d7", "d6")
triad.matrix
triad.count <- sapply(graph.lists, triad.census)
triad.count
?triad.count
?triad.census
d3
plot.igraph(graph.adjacency(d3))
plot.igraph(graph.adjacency(d4))
plot.igraph(graph.adjacency(d3))
d3<-matrix(c(0,1,1,-1,0,0,1,0,0),nrow=3,ncol=3)
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
names(mot.lst) <- c("s1", "s2", "s3", "s4", "s5", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8")
test<- lapply(mot.lst, function(x){for(i in 1:9){if(x[i] == -1){x[i] <- 0}};x})
test1 <- lapply(test, graph.adjacency)
graph.lists <- test1
triad.count <- sapply(graph.lists, triad.census)
triad.count
motif_counter(test1, names(mot.lst))
plot.igraph(graph.adjacency(d3))
d3
d3<-matrix(c(0,1,-1,1,0,0,1,0,0),nrow=3,ncol=3)
plot.igraph(graph.adjacency(d3))
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
names(mot.lst) <- c("s1", "s2", "s3", "s4", "s5", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8")
test <- lapply(mot.lst, graph.adjacency)
motif_counter(test, names(mot.lst))
## Create matrices for each of the 13 possible 3 species configurations
# "s" denotes single links only
s1<-matrix(c(0,1,0,-1,0,1,0,-1,0),nrow=3,ncol=3)
s2<-matrix(c(0,1,1,-1,0,1,-1,-1,0),nrow=3,ncol=3)
s3<-matrix(c(0,1,-1,-1,0,1,1,-1,0),nrow=3,ncol=3)
s4<-matrix(c(0,1,1,-1,0,0,-1,0,0),nrow=3,ncol=3)
s5<-matrix(c(0,0,1,0,0,1,-1,-1,0),nrow=3,ncol=3)
# "d" denotes that double links are included
d1<-matrix(c(0,1,1,-1,0,1,-1,1,0),nrow=3,ncol=3)
d2<-matrix(c(0,1,1,1,0,1,-1,-1,0),nrow=3,ncol=3)
d3<-matrix(c(0,1,-1,1,0,0,1,0,0),nrow=3,ncol=3)
d4<-matrix(c(0,1,1,-1,0,0,1,0,0),nrow=3,ncol=3)
d5<-matrix(c(0,1,1,-1,0,1,1,-1,0),nrow=3,ncol=3)
d6<-matrix(c(0,1,1,1,0,1,1,1,0),nrow=3,ncol=3)
d7<-matrix(c(0,1,1,1,0,1,1,-1,0),nrow=3,ncol=3)
d8<-matrix(c(0,1,1,1,0,0,1,0,0),nrow=3,ncol=3)
# Create a list of all 13 matrices
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
names(mot.lst) <- c("s1", "s2", "s3", "s4", "s5", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8")
# This shows that some of my motif matrices are WRONG
# NEEDS TO BE FIXED!!!!
testA2 <- lapply(mot.lst, graph.adjacency)
motif_counter(testA2, webs = names(mot.lst))
## Functions to get eigenvalues of randomly sampled matrices
ran.unif <- function(motmat){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, 10)}else if(x==-1){runif(1, -1, 0)} else{0}
})
diag(newmat) <- runif(1, -1, 0)
return(newmat)
}
### using a lognormal
ran.lnorm <- function(motmat){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){rlnorm(1, -1, 1)}else if(x==-1){-rlnorm(1, -5, 1)} else{0}
})
diag(newmat) <- -rlnorm(1, -5, 1)
return(newmat)
}
### Calculate largest eigenvalue (the real part)
maxRE <- function(rmat){
lam.max <- max(Re(eigen(rmat)$values))
return(lam.max)
}
### Wrap previous two functions together
eig.analysis <- function(n, matrices, mode = "unif"){
cols <- length(matrices)
rows <- n
eigenMATRIX <- matrix(0, nrow = rows, ncol = cols)
for(i in 1:n){
if(mode == "unif"){
ranmat <- lapply(matrices, ran.unif)
}else if(mode == "lnorm"){
ranmat <- lapply(matrices, ran.lnorm)
}
eigs <- sapply(ranmat, maxRE)
eigenMATRIX[i,] <- eigs
}
return(eigenMATRIX)
}
## Run with uniform
n <- 5000
system.time(
mot.stab<- eig.analysis(n, mot.lst, mode = "unif")
)
colnames(mot.stab) <- names(mot.lst)
## Run with lognormal
n <- 10000
system.time(
mot.stab.l<- eig.analysis(n, mot.lst, mode = "lnorm")
)
colnames(mot.stab.l) <- names(mot.lst)
require(reshape2)
m <- melt(mot.stab)
m.l <- melt(mot.stab.l)
require(ggplot2)
ggplot(m, aes(x = Var2, y = value)) + geom_boxplot() + geom_hline(aes(yintercept = 0))
ggplot(m.l, aes(x = Var2, y = value)) + geom_boxplot() + geom_hline(aes(yintercept = 0))
# Unif
mot.qss <- apply(mot.stab, 2, function(x){sum(x<0)/n})
sorted <- sort(mot.qss, decreasing = T)
sort.qss <- data.frame(sorted, names = names(sorted))
#Lnorm
mot.qss.l <- apply(mot.stab.l, 2, function(x){sum(x<0)/n})
sorted.l <- sort(mot.qss.l, decreasing = T)
sort.qss.l <- data.frame(sorted.l, names = names(sorted))
motcount <- read.csv("~/Desktop/GitHub/Ecological-Networks/FoodWebs/Tables/zscore_both.csv", row.names = 1)
df.freq <- data.frame(motcount)
mfreq <- melt(df.freq[,names(sorted)])
g <- ggplot(mfreq, aes(x = variable, y = value)) + geom_boxplot()
g <- g + geom_line(data = sort.qss, aes(x = 1:13, y = sorted), size = 1.5)
g <- g + geom_point(data = sort.qss, aes(x = 1:13, y = sorted), size = 4, col = "blue")
g <- g + geom_line(data = sort.qss.l, aes(x = 1:13, y = sorted.l), size = 1.5)
g <- g + geom_point(data = sort.qss.l, aes(x = 1:13, y = sorted.l), size = 4, col = "darkred")
g <- g + geom_hline(aes(yintercept = 0), lty = 2, col = "red")
g + xlab("Subgraph") + ylab("Frequency")
motcount
princomp(motcount)
summary(princomp(motcount))
princomp(motcount)$loadings
biplot(princomp(motcount))
?biplot
princomp(motcount[,1:5])
summary(princomp(motcount[,1:5]))
princomp(motcount[,1:5])$loadings
biplot(princomp(motcount[,1:5]))
psg <- read.csv("~/Desktop/ProblemSetGRADES2.csv")
princomp(psg)
psg
psg <- read.csv("~/Desktop/ProblemSetGRADES2.csv")[1:28,3:14]
princomp(psg)
psg
psg <- read.csv("~/Desktop/ProblemSetGRADES2.csv")[1:28,3:14]
princomp(psg)
psg
str(psg)
as.matrix(psg)
as.matrix(as.numeric(psg))
psg <- read.csv("~/Desktop/ProblemSetGRADES2.csv")[1:28,3:14]
str(psg)
princomp(psg)
summary(princomp(psg))
pcps <- princomp(psg)
biplot(pcps)
read.csv("~/Desktop/ProblemSetGRADES2.csv")
psg <- read.csv("~/Desktop/ProblemSetGRADES2.csv", row.names = 1)[1:28,3:14]
psg <- read.csv("~/Desktop/ProblemSetGRADES2.csv", row.names = 1)[1:28,2:13]
psg
pcps <- princomp(psg)
biplot(pcps)
psg <- read.csv("~/Desktop/ProblemSetGRADES2.csv", row.names = 1)[2:28,2:13]
pcps <- princomp(psg)
biplot(pcps)
ape <- c(82.09219858,
64.08865248,
69.70124113,
66.21187943,
95.39539007,
23.63031915,
9.791666667,
89.08687943,
82.82624113,
90.43070922,
91.81870567,
81.50797872,
59.40070922)
hist(ape)
mean(ape)
median(ape)
ape <- c(82.09219858,
64.08865248,
69.70124113,
66.21187943,
95.39539007,
23.63031915,
89.08687943,
82.82624113,
90.43070922,
91.81870567,
81.50797872,
59.40070922)
hist(ape)
mean(ape)
median(ape)
ape <- c(82.09219858,
64.08865248,
69.70124113,
66.21187943,
95.39539007,
89.08687943,
82.82624113,
90.43070922,
91.81870567,
81.50797872,
59.40070922)
hist(ape)
mean(ape)
median(ape)
biplot(pcps)
pcps$loadings
?princomp
?prcomp
pcps <- prcomp(psg)
biplot(pcps)
biplot(pcps, cex = .5)
ran.unif <- function(motmat, pred = 10, prey = -1, random = F){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, pred)}else if(x==-1){runif(1, prey, 0)} else{0}
})
if(random){
diag(newmat) <- runif(length(diag(newmat)), -1, 0)
}else{diag(newmat) <- -1}
return(newmat)
}
### using a lognormal
ran.lnorm <- function(motmat){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){rlnorm(1, -1, 1)}else if(x==-1){-rlnorm(1, -5, 1)} else{0}
})
diag(newmat) <- -rlnorm(1, -5, 1)
return(newmat)
}
### Calculate largest eigenvalue (the real part)
maxRE <- function(rmat){
lam.max <- max(Re(eigen(rmat)$values))
return(lam.max)
}
### Wrap previous two functions together
eig.analysis <- function(n, matrices, params, mode = "unif"){
cols <- length(matrices)
rows <- n
eigenMATRIX <- matrix(nrow = rows, ncol = cols)
for(i in 1:n){
if(mode == "unif"){
ranmat <- lapply(matrices, ran.unif, pred = params[,1], prey = params[,2], random = T)
}else if(mode == "lnorm"){
ranmat <- lapply(matrices, ran.lnorm, pred = params[,1], prey = params[,2])
}
eigs <- sapply(ranmat, maxRE)
eigenMATRIX[i,] <- eigs
}
return(eigenMATRIX)
}
conversion <- function(tm){
for(i in 1:nrow(tm)){
for(j in 1:ncol(tm)){
if(tm[i,j] == 1){tm[j,i] <- -1}
}
}
return(tm)
}
randomQSS <- function(numweb = 200, chain = 9, total = 14, params){
require(NetIndices)
mywebs <- list()
for(j in 1:numweb){
check <- 1
while(!check == 0){
myweb <- matrix(0, nrow = 10, ncol = 10)
for(i in 1:chain){
myweb[i,i+1] <- 1
}
tophalf <- which(myweb[upper.tri(myweb)] == 0)
newones <- sample(tophalf, total-chain)
myweb[upper.tri(myweb)][newones] <- 1
mywebs[[j]] <- myweb
indeg <- apply(myweb, 1, sum)
outdeg <- apply(myweb, 2, sum)
deg <- indeg + outdeg
if(sum(deg == 0) >= 1){check <- 1}else{check <- 0}
# Maybe add an additional check to ensure that there is at least one species with indeg = 0
}
}
mywebs1 <- lapply(mywebs, conversion)
myweb.tl <- lapply(mywebs, TrophInd)
emat <- eig.analysis(1000, mywebs1, params, mode = "unif")
qss <- apply(emat, 2, function(x){sum(x<0)/1000})
mtl <- sapply(myweb.tl, max)
return(list(webs = mywebs, trophics = myweb.tl, eigs = emat, qss = qss, maxTL = mtl))
}
testLENGTH <- function(webiter = 200, maxchain = 9, totalINT = 14, params){
qssLIST <- list()
mtlLIST <- list()
troLIST <- list()
for(i in 1:maxchain){
cat(i, "\n")
test <- randomQSS(numweb = webiter, chain = i, total = totalINT, params = params)
qssLIST[[i]] <- test$qss
mtlLIST[[i]] <- test$maxTL
troLIST[[i]] <- lapply(test$trophics, function(x){x$TL})
}
quas <- unlist(qssLIST)
maxtl <- unlist(mtlLIST)
meantl<- rapply(troLIST, mean)
medtl <- rapply(troLIST, median)
data <- data.frame(QSS = quas, MaxTL = maxtl, MeanTL = meantl, MedTL = medtl)
return(data)
}
pars <- data.frame(pred = c(10, 10, 10, 5, 5, 5, 1, 1, 1), prey = c(-1, -5, -10, -1, -5, -10, -1, -5, -10))
ints <- c(12, 14, 16, 24, 34, 44)
i = 1
chainDATA <- data.frame(QSS = c(), MaxTL = c(), MeanTL = c(), MedTL = c(), ints = factor())
for(j in 1:length(ints)){
chain <- testLENGTH(webiter = 100, maxchain = 9, totalINT = ints[j], params = pars[i,])
chain <- cbind(chain, ints = factor(rep(ints[j], 900)))
chainDATA <- rbind(chainDATA, chain)
}
if(!require(plotly)){
install.packages("plotly")
}
if(!require(plotly)){
install_github("plotly", "ropensci")
}
require(devtools)
if(!require(plotly)){
install_github("plotly", "ropensci")
}
require(plotly)
py <- plotly(username="jjborrelli", key="3v3dnurii0")
tinfo <- read.csv("Desktop/GitHub/Ecological-Networks/FoodWebs/Tables/NODEproperties.csv")
head(tinfo)
tinfo <- read.csv("Desktop/GitHub/Ecological-Networks/FoodWebs/Tables/NODEproperties.csv", row.names = 1)
head(tinfo)
require(ggplot2)
ggplot(tinfo, aes(x = TL, y = OI)) + geom_point(aes(col = L1))
g <- ggplot(tinfo, aes(x = TL, y = OI)) + geom_point(aes(col = L1))
r <- py$ggploty(g)
r <- py$ggplotly(g)
r
g <- ggplot(tinfo, aes(x = TL, y = ..density..)) + geom_histogram()
g
r <- py$ggplotly(g)
g <- ggplot(tinfo, aes(x = TL, y = ..density..)) + geom_histogram(binwidth = .1)
g
g <- ggplot(tinfo, aes(x = TL, y = ..density..)) + geom_histogram(binwidth = .25)
g
r <- py$ggplotly(g)
tinfo <- read.csv("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/NODEproperties.csv", row.names = 1)
```
tinfo <- read.csv("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/NODEproperties.csv", row.names = 1)
```
require(RCurl)
url <- getURL("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/NODEproperties.csv")
tinfo <- read.csv(text = url, row.names = 1)
head(tinfo)
data <- rnorm(100)
data <- data.frame(rnorm(100))
hist(data)
data
is.numeric(data)
data <- data.frame(x = rnorm(100))
is.numeric(data)
hist(data$x)
g <- ggplot(data, aes(x = x, y = ..density..)) + geom_histogram()
g
g <- ggplot(data, aes(x = x, y = ..density..)) + geom_histogram(binwidth = .5)
g <- ggplot(data, aes(x = x, y = ..density..)) + geom_histogram(binwidth = .5)
g
r <- py$ggplotly(g)
data <- data.frame(x = rnorm(100))
g <- ggplot(data, aes(x = x, y = ..density..)) + geom_histogram(binwidth = .5)
r <- py$ggplotly(g)
x <- ggplot(data, aes(x = x, y = ..density..)) + geom_histogram(binwidth = .5)
r <- py$ggplotly(x)
g <- ggplot(tinfo, aes(x = TL, y = OI)) + geom_point(col = L1)
g <- ggplot(tinfo, aes(x = TL, y = OI)) + geom_point(aes(col = L1))
g
setwd("~/Desktop/GitHub/Food Chain Length/WholeWebSim/")
load("chainINFO.Rdata")
dim(totalDAT)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) + geom_point(aes(col = ints)) + geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
require(ggplot2)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) + geom_point(aes(col = ints)) + geom_smooth(aes(col = ints), method = "glm") + facet_wrap(~scenario)
ggplot(totalDAT, aes(x = MedTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(c(2:15))
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(c(2:15))
?scale_x_continuous(
)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
getwd()
ggsave("maxtlPLOT.png", width = 7, height = 7, dpi = 600)
ggsave("maxtlPLOT.png", width = 7, height = 9, dpi = 600)
dev.off()
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggsave("maxtlPLOT.png", width = 9, height = 7, dpi = 600)
ints
levels(ints)
levels(factor(ints))
levels(totalDAT$ints)
levels(totalDAT$ints) <- as.character(ints)
table(totalDAT$ints)
length(totalDATA)
levels(totalDATA[[3]]$ints)
levels(totalDATA[[4]]$ints)
levels(totalDATA[[5]]$ints)
levels(totalDATA[[6]]$ints)
levels(totalDATA[[7]]$ints)
levels(totalDATA[[8]]$ints)
levels(totalDATA[[9]]$ints)
levels(totalDATA[[10]]$ints)
levels(totalDATA[[1]]$ints)
levels(totalDATA[[2]]$ints)
i =2
totalDATA[[2]]
chainDATA <- data.frame(QSS = c(), MaxTL = c(), MeanTL = c(), MedTL = c(), ints = factor())
for(j in 1:length(ints)){
chain <- testLENGTH(webiter = 100, maxchain = 9, totalINT = ints[j], params = pars[i,])
chain <- cbind(chain, ints = factor(rep(ints[j], 900)))
chainDATA <- rbind(chainDATA, chain)
cat("\n", ints[j], "is done", "\n")
}
totalDATA[[i]] <- chainDATA
cat("\n", i, "th par done", "\n")
totalDATA2 <- list()
for(i in 1:9){
totalDATA2[[i]] <- cbind(totalDATA[[i]], scenario = paste(pars[i,], collapse = "/"))
}
levels(totalDATA[[2]]$ints)
head(totalDATA2[[1]])
totalDAT <- do.call(rbind, totalDATA2)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggsave("maxtlPLOT.png", width = 9, height = 7, dpi = 600)
dim(totalDAT)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "loess") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
?TrophInd
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggsave("meantlPLOT.png", width = 9, height = 7, dpi = 600)
dev.off()
ggplot(totalDAT, aes(x = MedTL, y = QSS)) +
geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggsave("medtlPLOT.png", width = 9, height = 7, dpi = 600)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints), alpha = .5) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints), alpha = .5) +
geom_smooth(aes(col = ints), method = "glm", alpha = 1.5) +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
geom_point(aes(col = ints), alpha = .25) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggplot(totalDAT, aes(x = MaxTL, y = QSS)) +
#geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggsave("maxtlPLOT2.png", width = 9, height = 7, dpi = 600)
dev.off()
ggplot(totalDAT, aes(x = MeanTL, y = QSS)) +
#geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggsave("meantlPLOT2.png", width = 9, height = 7, dpi = 600)
dev.off()
ggplot(totalDAT, aes(x = MedTL, y = QSS)) +
#geom_point(aes(col = ints)) +
geom_smooth(aes(col = ints), method = "glm") +
facet_wrap(~scenario) +
scale_x_continuous(breaks = 2:15)
ggsave("medtlPLOT2.png", width = 9, height = 7, dpi = 600)
dev.off()
save.image("chainINFO.Rdata")
