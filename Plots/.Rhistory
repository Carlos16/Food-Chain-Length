?t.test
?prop.test
??wald
??score
?prop.test
prop.CI = function(p, n, alpha = 0.05, digits = 3, method = "likelihood") {
# Asymptotic (or Wald) interval:
z = qnorm(1 - alpha/2)
if (method == "asymptotic") {
se = sqrt(p * (1 - p)/n)
CI = list(p = p, CI = c((p - z * se), (p + z * se)), n = n, level = 1 -
alpha, method = method)
}
# Asymptotic (or Wald-test) CIs with continuity correction:
if (method == "asymptotic.cc") {
se = sqrt(p * (1 - p)/n)
CI = list(p = p, CI = c((p - z * se - 1/(2 * n)), (p + z * se + 1/(2 *
n))), n = n, level = 1 - alpha, method = method)
}
# Score test (or Wilson) interval:
if (method == "score") {
term1 = 2 * n * p + z^2
term2 = z * sqrt(z^2 + 4 * n * p * (1 - p))
term3 = 2 * (n + z^2)
CI = list(p = p, CI = c((term1 - term2)/term3, (term1 + term2)/term3),
n = n, level = 1 - alpha, method = method)
}
# Score test (or Wilson) interval with continuity correction:
if (method == "score.cc") {
term1 = 2 * n * p + z^2
if (p > 0) {
term2L = z * sqrt(z^2 - 2 - 1/n + 4 * p * (n * (1 - p) + 1))
}
if (p < 1) {
term2U = z * sqrt(z^2 + 2 - 1/n + 4 * p * (n * (1 - p) - 1))
}
term3 = 2 * (n + z^2)
if ((p > 0) & (p < 1)) {
CI = list(p = p, CI = c((term1 - 1 - term2L)/term3, (term1 + 1 +
term2U)/term3), n = n, level = 1 - alpha, method = method)
}
if (p == 0) {
CI = list(p = p, CI = c(0, CIU = (term1 + 1 + term2U)/term3), n = n,
level = 1 - alpha, method = method)
}
if (p == 1) {
CI = list(p = p, CI = c((term1 - 1 - term2L)/term3, 1), n = n, level = 1 -
alpha, method = method)
}
}
# Binomial ('exact' or Clopper-Pearson) interval:
if (method == "binomial") {
conf.int = binom.test(round(p * n), n, conf.level = 1 - alpha)$conf.int
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
# Binomial mid-p quasi-exact interval:
if (method == "binomial.midp") {
x = round(p * n)
uplim = 1
lowlim = 0
if (x == 0)
uplim = 1 - alpha^(1/n)
if (x == n)
lowlim = alpha^(1/n)
if (x > 0 & x < n) {
pp = seq(1e-06, 0.999999, length = 1e+05)
a2 = 0.5 * pbinom(x - 1, n, pp) + 0.5 * pbinom(x, n, pp)
uplim = pp[max(which(a2 > (alpha/2)))]
lowlim = pp[min(which(a2 < (1 - alpha/2)))]
}
CI = list(p = p, CI = c(lowlim, uplim), n = n, level = 1 - alpha, method = method)
}
# Log-likelihood-ratio interval:
if (method == "likelihood") {
x = round(p * n)
k = -qchisq(1 - alpha, 1)/2
pp = seq(1e-06, 0.999999, length = 1e+05)
lik = dbinom(x, size = n, pp)
logLR = log(lik/max(lik))
conf.int = range(pp[logLR > k])
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
# Jeffreys prior interval:
if (method == "Jeffreys") {
x = round(p * n)
conf.int = qbeta(c(alpha/2, 1 - alpha/2), x + 0.5, n - x + 0.5)
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
# Agresti-Coull (adding z?/2 successes) interval (see:
# http://www.stat.ufl.edu/~aa/cda/R/one_sample/R1/index.html )
if (method == "Agresti-Coull") {
x = round(p * n)
tr = z^2
suc = tr/2
pp = (x + suc)/(n + tr)
se = sqrt(pp * (1 - pp)/(n + tr))
CI = list(p = p, CI = c((pp - z * se), (pp + z * se)), n = n, level = 1 -
alpha, method = method)
if (CI$CI[1] < 0)
CI$CI[1] = 0
if (CI$CI[2] > 1)
CI$CI[2] = 1
}
# Agresti-Coull (adding 2 successes and 2 failures) interval: (see:
# http://www.stat.ufl.edu/~aa/cda/R/one_sample/R1/index.html )
if (method == "Agresti.2_2") {
x = round(p * n)
pp = (x + 2)/(n + 4)
se = sqrt(pp * (1 - pp)/(n + 4))
CI = list(p = p, CI = c((pp - z * se), (pp + z * se)), n = n, level = 1 -
alpha, method = method)
if (CI$CI[1] < 0)
CI$CI[1] = 0
if (CI$CI[2] > 1)
CI$CI[2] = 1
}
# Logit interval:
if (method == "logit") {
lambda = log(p/(1 - p))
x = round(p * n)
V = n/(x * (n - x))
conf.int = (c(lambda - z * sqrt(V), lambda + z * sqrt(V)))
conf.int = exp(conf.int)/(1 + exp(conf.int))
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
cat("p ? ", 100 * (1 - alpha), "%-CI = ", round(p, digits), " (", round(CI$CI[1],
digits), "; ", round(CI$CI[2], digits), ")\n", sep = "")
CI
}
prop.CI(.8, 10000)
prop.CI(.8, 10000, method = "asymptotic")
library(igraph)
get.adjacency(graph.formula(A+-B))
plot(graph.formula(A+-B))
summary(cars)
plot(cars)
library(igraph)
?plot.igraph
graph.adjacency
?graph.adjacency
s <- matrix(c(0, 2, 1, 0, 0, 0, 1, 2, 3), nrow = 3, ncol = 3)
s
graph.adjacency(s)
graph.adjacency(s, weighted = T)
g1 <- graph.adjacency(s, weighted = T)
g2 <- graph.adjacency(s)
plot.igraph(g1)
plot.igraph(g2)
g1 <- graph.adjacency(s, weighted = T, mode = "plus")
plot.igraph(g1)
g1 <- graph.adjacency(s, weighted = T, directed = F)
g1 <- graph.adjacency(s, weighted = T, mode = "undirected")
plot.igraph(g1)
g1 <- graph.adjacency(s, weighted = T, mode = "directed")
plot.igraph(g1)
s
g1
g1 <- graph.adjacency(s, weighted = T, mode = "upper")
plot.igraph(g1)
g1 <- graph.adjacency(s, weighted = T, mode = "directed")
plot.igraph(g1)
get.edgelist(g1)
plot.igraph(g1, arrow.mode = 2)
plot.igraph(g1, edge.arrow.mode = 2)
plot.igraph(g1, edge.arrow.mode = c(2,2,2,2,2))
plot.igraph(g1)
plot.igraph(g1, edge.curved = T)
g1 <- graph.adjacency(s, weighted = T, mode = "directed")
plot.igraph(g1, edge.curved = T)
plot.igraph(g1, edge.curved = T, edge.size = c(2,1,1,2,3))
plot.igraph(g1, edge.curved = T, edge.width = c(2,1,1,2,3))
get.edgelist(g1)
plot.igraph(g1, edge.curved = T, edge.width = c(2,1,1,2,3))
s1<-matrix(c(-1,1,0,-1,0,1,0,-1,0),nrow=3,ncol=3)
s2<-matrix(c(-1,1,1,-1,0,1,-1,-1,0),nrow=3,ncol=3)
s3<-matrix(c(-1,1,-1,-1,0,1,1,-1,0),nrow=3,ncol=3)
s4<-matrix(c(-1,0,1,0,0,1,-1,-1,0),nrow=3,ncol=3)
s5<-matrix(c(-1,1,1,-1,0,0,-1,0,0),nrow=3,ncol=3)
d1<-matrix(c(-1,1,1,1,0,1,0,0,0),nrow=3,ncol=3)
d2<-matrix(c(-1,1,1,0,0,1,0,1,0),nrow=3,ncol=3)
d3<-matrix(c(-1,1,1,1,0,0,0,0,0),nrow=3,ncol=3)
d4<-matrix(c(-1,1,1,0,0,0,0,1,0),nrow=3,ncol=3)
d5<-matrix(c(-1,1,1,0,0,1,1,0,0),nrow=3,ncol=3)
d6<-matrix(c(-1,1,1,1,0,1,1,1,0),nrow=3,ncol=3)
d7<-matrix(c(-1,1,1,1,0,1,1,0,0),nrow=3,ncol=3)
d8<-matrix(c(-1,1,1,1,0,0,1,0,0),nrow=3,ncol=3)
source_url("https://raw.github.com/jjborrelli/Ecological-Networks/master/Chain%20Length/Rscripts/chains_functions.R")
library(devtools)
source_url("https://raw.github.com/jjborrelli/Ecological-Networks/master/Chain%20Length/Rscripts/chains_functions.R")
get_qss<- function(chains, mode, parms, iter){
# Input: list of matrices, uniform or normal dist, parameters, and number of iterations
# Output: matrix of QSS values
# parameters is dataframe
## unif: min and max of distribution
## norm: mean and standard deviation
test <- matrix(nrow = length(chains), ncol = nrow(parms))
for(i in 1:nrow(parms)){
eigen.test <- lapply(chains, analyze_eigen, mode = mode, iter = iter,
params = parms[i,], self = 0)
qss.test <- lapply(eigen.test, function(x){
sum(x < 0) / 10000
})
test[,i] <- unlist(qss.test)
}
return(test)
}
params.n <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(1, 2, 3, 4, 5, 6, 7),
prey1 = c(0, 0, 0, 0, 0, 0, 0), prey2 = c(1, 1, 1, 1, 1, 1, 1))
mot.qss <- get_qss(mot.lst, mode = "norm", parms = params.n, iter = 10000)
params.u <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(10, 10, 10, 10, 5, 3, 1),
prey1 = c(-5, -1, -.1, -.01, -1, -1, -1), prey2 = c(0, 0, 0, 0, 0, 0, 0))
mot.qss.u <- get_qss(mot.lst, mode = "unif", parms = params.u, iter = 10000)
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
params.n <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(1, 2, 3, 4, 5, 6, 7),
prey1 = c(0, 0, 0, 0, 0, 0, 0), prey2 = c(1, 1, 1, 1, 1, 1, 1))
mot.qss <- get_qss(mot.lst, mode = "norm", parms = params.n, iter = 10000)
params.u <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(10, 10, 10, 10, 5, 3, 1),
prey1 = c(-5, -1, -.1, -.01, -1, -1, -1), prey2 = c(0, 0, 0, 0, 0, 0, 0))
mot.qss.u <- get_qss(mot.lst, mode = "unif", parms = params.u, iter = 10000)
mot.qss
mot.qss.u
analyze_eigen
function(m, iter, mode, params, self = 0){
# Input: matrix, number of iterations, unif or norm, parameters
# Output: iter # of eigenvalues
if (mode == "unif"){
evals <- c()
for (i in 1:iter){
eig <- eigen_unif(m, params, self = self)
evals[i] <- eig
}
return(evals)
}
if (mode == "norm"){
evals <- c()
for (i in 1:iter){
eig <- eigen_norm(m, params, self = self)
evals[i] <- eig
}
return(evals)
}
}
mot.qss <- get_qss(mot.lst, mode = "norm", parms = params.n, iter = 10000)
eigen_unif
eigen_norm
library(vegan)
permatfull
?permatfull
m <- matrix(rbinom(9), nrow = 3, ncol = 3)
m <- matrix(rbinom(9, 1), nrow = 3, ncol = 3)
m <- matrix(rbinom(9, 1, .5), nrow = 3, ncol = 3)
m
permatfull(m)
permatswap(m)
plot(permatswap(m))
lynx
plot(lynx)
precip
head(precip)
trees
presidents
cars
mtcars
qss.plot
require(RCurl)
require(igraph)
require(reshape2)
require(ggplot2)
require(grid)
require(devtools)
sign2<-matrix(c(-1,-1,1,0),nrow=2,ncol=2)
diag(sign2)<--1
sign3<-matrix(c(-1,-1,-1,1,0,-1,1,1,0),nrow=3,ncol=3)
diag(sign3)<--1
sign4<-matrix(nrow=4,ncol=4)
sign4[lower.tri(sign4)]<--1
sign4[upper.tri(sign4)]<-1
diag(sign4)<--1
sign5<-matrix(nrow=5,ncol=5)
sign5[lower.tri(sign5)]<--1
sign5[upper.tri(sign5)]<-1
diag(sign5)<--1
sign6<-matrix(nrow=6,ncol=6)
sign6[lower.tri(sign6)]<--1
sign6[upper.tri(sign6)]<-1
diag(sign6)<--1
sign.matrices<-list(sign2,sign3,sign4,sign5,sign6)
names(sign.matrices)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
sign.matrices
analyze.eigen<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-1,0),NA)
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(Re(eigen(m)$values))
return(ev)
}
set.seed(5)
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(eigenvalues[[i]]<0)/10000
}
names(eigenvalues)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss
set.seed(10)
analyze.eigen.sensitivity1<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-5,0),NA)  #note the difference in distribution here
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(Re(eigen(m)$values))
return(ev)
}
eigenvalues.sensitivity1<-list()
qss.sensitivity1<-list()
for(i in 1:5){
eigenvalues.sensitivity1[[i]]<-replicate(10000,analyze.eigen.sensitivity1(sign.matrices[[i]]))
qss.sensitivity1[[i]]<-sum(eigenvalues.sensitivity1[[i]]<0)/10000
}
names(eigenvalues.sensitivity1)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss.sensitivity1)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss.sensitivity1
(15)
set.seed(15)
analyze.eigen.sensitivity2<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-0.1,0),NA)  #note the difference in distribution here
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(Re(eigen(m)$values))
return(ev)
}
eigenvalues.sensitivity2<-list()
qss.sensitivity2<-list()
for(i in 1:5){
eigenvalues.sensitivity2[[i]]<-replicate(10000,analyze.eigen.sensitivity2(sign.matrices[[i]]))
qss.sensitivity2[[i]]<-sum(eigenvalues.sensitivity2[[i]]<0)/10000
}
names(eigenvalues.sensitivity2)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss.sensitivity2)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss.sensitivity2
set.seed(20)
analyze.eigen.sensitivity3<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-0.01,0),NA)  #note the difference in distribution here
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(Re(eigen(m)$values))
return(ev)
}
eigenvalues.sensitivity3<-list()
qss.sensitivity3<-list()
for(i in 1:5){
eigenvalues.sensitivity3[[i]]<-replicate(10000,analyze.eigen.sensitivity3(sign.matrices[[i]]))
qss.sensitivity3[[i]]<-sum(eigenvalues.sensitivity3[[i]]<0)/10000
}
names(eigenvalues.sensitivity3)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss.sensitivity3)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss.sensitivity3
qtab <- list(qss, qss.sensitivity2, qss.sensitivity3, qss.sensitivity1)
names(qtab) <- c("U (-1.0, 0)", "U (-0.1, 0)", "U (-0.01, 0)", "U (-5.0, 0)")
qss.data <- melt(qtab, id = c("2 sp", "3 sp", "4 sp", "5 sp", "6 sp"))
colnames(qss.data) <- c("QSS", "Levels", "Distribution")
qss.data$Levels <- c(2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6)
qss.data$Distribution2 <- factor(qss.data$Distribution,
levels = (c("U (-1.0, 0)", "U (-0.1, 0)", "U (-0.01, 0)", "U (-5.0, 0)")))
qss.plot <- qplot(Levels, QSS, data = qss.data, xlab = "Number of Trophic Levels", margin = T)
qss.plot <- qss.plot + geom_point(aes(shape = qss.data$Distribution2), size = 4)
qss.plot <- qss.plot + geom_line(aes(linetype = qss.data$Distribution2))
qss.plot <- qss.plot + theme(legend.title = element_blank())
qss.plot <- qss.plot + theme(legend.key.size = unit(2, "cm"), legend.text = element_text(size = 20))
qss.plot <- qss.plot + theme(axis.title.x = element_text(size=25))
qss.plot <- qss.plot + theme(axis.title.y = element_text(size=25))
qss.plot <- qss.plot + theme(axis.text.x = element_text(size=18))
qss.plot <- qss.plot + theme(axis.text.y = element_text(size=18))
qss.plot
setwd()
getwd()
setwd("~/Desktop/GitHub/Food Chain Length/Plots")
ggsave("qss_plot.svg", height = 10, width = 10, dpi = 600)
trophic.properties.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/NodeProperties.csv")
trophic.properties <- read.csv(text = trophic.properties.URL)
consumers <- which(round(trophic.properties$TL, 6) >= 2)
# ggplot of distribution of trophic positions equal or higher than 2
tc.plot<-qplot(trophic.properties$TL[consumers], binwidth = .8, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 1:6)
tc.plot + scale_x_continuous(breaks = 1:6) + geom_histogram(aes(y = ..density..))
tc.plot<-ggplot(trophic.properties, aes = (y = TL[consumbers]))
tc.plot + geom_histogram(aes(y = ..density..))
tc.plot + geom_histogram(aes(y = ..density.., x = TL[consumers]))
ggplot(trophic.properties, aes(x = TL[consumers])) + geom_density()
ggplot(trophic.properties[consumers], aes(x = TL[consumers])) + geom_density()
ggplot(trophic.properties[consumers,], aes(x = TL)) + geom_density()
ggplot(trophic.properties[consumers,], aes(x = TL)) + geom_histogram(aes(y = ..density..))
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL)) + geom_histogram(aes(y = ..density..))
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 1:6)
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Frequency")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 1:6)
tc.plot + scale_x_continuous(breaks = 1:6) + scale_y_continuous(breaks = seq(0, 1, .2))
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Frequency")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 1:6) + scale_y_continuous(breaks = seq(0, 1, .2))
tc.plot + scale_x_continuous(breaks = 1:6) + scale_y_continuous(limits = c(0,1))
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Frequency")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 1:6)
ggsave("tc_plot.svg", height = 10, width = 10, dpi = 600)
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .75,
xlab = "Trophic Position", ylab = "Frequency")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 1:6)
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Frequency")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 1:6)
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Frequency")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 2:6)
ggsave("tc_plot.svg", height = 10, width = 10, dpi = 600)
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 20))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 15))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 15))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
ggsave("tc_plot.svg", height = 10, width = 10, dpi = 600)
qss.plot
tc.plot <- ggplot(trophic.properties[consumers,], aes(x = TL))
tc.plot <- tc.plot + geom_histogram(aes(y = ..density..), binwidth = .8,
xlab = "Trophic Position", ylab = "Density")
tc.plot <- tc.plot + theme(axis.title.x = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.title.y = element_text(size = 25))
tc.plot <- tc.plot + theme(axis.text.x = element_text(size = 18))
tc.plot <- tc.plot + theme(axis.text.y = element_text(size = 18))
tc.plot + scale_x_continuous(breaks = 2:6, name = "Trophic Position") + scale_y_continuous(name = "Density")
ggsave("tc_plot.svg", height = 10, width = 10, dpi = 600)
length(consumers)
