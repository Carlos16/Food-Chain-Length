getwd()
filepath <- paste(getwd(), "Figure1", collapse = "/")
filepath
filepath <- paste(getwd(), "Figure1", sep = "/")
filepath
require(RCurl)
require(igraph)
require(reshape2)
require(ggplot2)
require(grid)
require(devtools)
web.diameters.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
web.diameters <- read.csv(text = web.diameters.URL)
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2.5, 9.5, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot + scale_x_continuous(name = "Longest Chain Length", breaks = 0:9)
web.diameters
aggregate(web.diameters, by=list(diameter))
aggregate(web.diameters, by=list(diameter), length)
aggregate(web.diameters, by=list(diameter), sum)
aggregate(web.diameters, by=list(factor(diameter)), sum)
aggregate(web.diameters, by=list(factor(diameter)), length)
aggregate(web.diameters, by=list(factor(web.diameters$diameter)), length)
h<- hist(web.diameters$Diameter)
h
h<- hist(web.diameters$Diameter+1)
h<- hist(web.diameters$Diameter+1, freq = F)
h
29/50
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(3, 9, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot + scale_x_continuous(name = "Longest Chain Length", breaks = 0:9)
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2, 9, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot + scale_x_continuous(name = "Longest Chain Length", breaks = 0:9)
dev.off()
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2, 9, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot + scale_x_continuous(name = "Longest Chain Length", breaks = 0:9)
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2, 9, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot + scale_x_continuous(name = "Longest Chain Length")
table(web.diameters$Diameter)
table(web.diameters$Diameter+1)
web.diameters.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
require(RCurl)
web.diameters.URL <- getURL("https://raw.github.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv")
web.diameters <- read.csv(text = web.diameters.URL)
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2.5, 9.5, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
require(RCurl)
require(igraph)
require(reshape2)
require(ggplot2)
require(grid)
require(devtools)
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2.5, 9.5, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot <- diam.plot + scale_x_continuous(name = "Longest Chain Length", breaks = 0:9)
diam.plot
install.packages("devtools")
library(RCurl)
library(igraph)
library(reshape2)
library(ggplot2)
library(grid)
library(devtools)
path <- getURL("https://raw.githubusercontent.com/jjborrelli/Food-Chain-Length/master/Tables/webDiameters.csv",
ssl.verifypeer=0L, followlocation=1L)
web.diameters <- read.csv(text = path, row.names = 1)
diam.plot <- ggplot(web.diameters, aes(x = Diameter + 1, y = ..density..))
diam.plot <- diam.plot + geom_histogram(breaks = seq(2.5, 9.5, 1))
diam.plot <- diam.plot + theme(axis.title.x = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.title.y = element_text(size = 20))
diam.plot <- diam.plot + theme(axis.text.x = element_text(size = 15))
diam.plot <- diam.plot + theme(axis.text.y = element_text(size = 15))
diam.plot <- diam.plot + scale_y_continuous(name = "Density")
diam.plot <- diam.plot + scale_x_continuous(name = "Longest Chain Length", breaks = 0:9)
diam.plot
sign2<-matrix(c(-1,-1,1,0),nrow=2,ncol=2)
diag(sign2)<--1
sign3<-matrix(c(-1,-1,-1,1,0,-1,1,1,0),nrow=3,ncol=3)
diag(sign3)<--1
sign4<-matrix(nrow=4,ncol=4)
sign4[lower.tri(sign4)]<--1
sign4[upper.tri(sign4)]<-1
diag(sign4)<--1
sign5<-matrix(nrow=5,ncol=5)
sign5[lower.tri(sign5)]<--1
sign5[upper.tri(sign5)]<-1
diag(sign5)<--1
sign6<-matrix(nrow=6,ncol=6)
sign6[lower.tri(sign6)]<--1
sign6[upper.tri(sign6)]<-1
diag(sign6)<--1
sign.matrices<-list(sign2,sign3,sign4,sign5,sign6)
names(sign.matrices)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
sign.matrices
graph.chains<-lapply(sign.matrices,graph.adjacency)
twospec2<-matrix(c(1,1,
2,2),nrow=2,ncol=2,byrow=T)
threespec2<-matrix(c(1,1,
3,1,
2,2),nrow=3,ncol=2,byrow=T)
fourspec2<-matrix(c(1,1,
2,2,
0,2,
1,3),nrow=4,ncol=2,byrow=T)
fivespec2<-matrix(c(2,1,
3,2,
1,2,
3,3,
1,3),nrow=5,ncol=2,byrow=T)
sixspec2<-matrix(c(2,1,
3,2,
1,2,
3,3,
1,3,
2,4),nrow=6,ncol=2,byrow=T)
layouts<-list(twospec2,threespec2,fourspec2,fivespec2,sixspec2)
text<-c("a","b","c","d","e")
for(i in 1:5){
E(graph.chains[[i]])$color = "darkslategray4"
E(graph.chains[[i]], path = c(1:(i+1)))$color = "darkslategrey"
}
par(mfrow=c(5, 1),mar=c(.5, .5, .5, .5))
for(i in 1:5){
plot.igraph(graph.chains[[i]], layout = layouts[[i]],
vertex.size = 40,
vertex.color = "black",
vertex.label.color = "white",
vertex.label.cex = 1.5,
edge.width = 3,
edge.arrow.size = .75,
frame = T)
text(2, 1, label = text[i], cex = 1.5)
}
analyze.eigen<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-1,0),NA)
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(Re(eigen(m)$values))
return(ev)
}
set.seed(5)
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(eigenvalues[[i]]<0)/10000
}
names(eigenvalues)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(Re(eigenvalues[[i]])<0)/10000
}
qss
eigenvalues
plot(eigenvalues[[1]])
plot(eigenvalues[[2]])
dev.off()
plot(eigenvalues[[2]])
analyze.eigen<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-1,0),NA)
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(eigen(m)$values)
return(ev)
}
analyze.eigen<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-1,0),NA)
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-max(eigen(m)$values)
return(ev)
}
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(Re(eigenvalues[[i]])<0)/10000
}
analyze.eigen<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-1,0),NA)
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-eigen(m)$values[1]
return(ev)
}
analyze.eigen<-function(m){
for(i in 1:nrow(m)){
for (j in 1:nrow(m)){
ifelse(m[i,j]==1,m[i,j]<-runif(1,0,10),NA)
ifelse(m[i,j]==-1,m[i,j]<-runif(1,-1,0),NA)
}
}
for(i in 1:nrow(m)){
if(m[i,i]<0){m[i,i]<--1}
}
ev<-eigen(m)$values[1]
return(ev)
}
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(Re(eigenvalues[[i]])<0)/10000
}
plot(eigenvalues[[2]])
abline(v = 0)
plot(eigenvalues[[3]])
plot(eigenvalues[[4]])
plot(eigenvalues[[5]])
plot(eigenvalues[[6]])
qss
set.seed(5)
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(Re(eigenvalues[[i]])<0)/10000
}
names(eigenvalues)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss
eigenvalues<-list()
qss<-list()
for(i in 1:5){
eigenvalues[[i]]<-replicate(10000,analyze.eigen(sign.matrices[[i]]))
qss[[i]]<-sum(Re(eigenvalues[[i]])<0)/10000
}
names(eigenvalues)<-c("2 sp","3 sp","4 sp","5 sp","6 sp")
names(qss)<-c("2 sp","3 sp","4 sp","5 sp", "6 sp")
qss
plot(unlist(qss)~c(2,3,4,5,6),
ylim=c(0,1), typ="o", lty=2, pch=21, bg="black",
xlab="Number of Trophic Levels",
ylab="QSS")
ran.unif <- function(motmat, pred = 10, prey = -1, random = F){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, pred)}else if(x==-1){runif(1, prey, 0)} else{0}
})
if(random){
diag(newmat) <- runif(length(diag(newmat)), -1, 0)
}else{diag(newmat) <- -1}
return(newmat)
}
maxRE <- function(rmat){
lam.max <- eigen(rmat)$values[1]
return(lam.max)
}
eig.analysis <- function(n, matrices, params){
require(data.table)
cols <- length(matrices)
rows <- n
eigenMATRIX.re <- matrix(nrow = rows, ncol = cols)
eigenMATRIX.im <- matrix(nrow = rows, ncol = cols)
samps <- list()
for(i in 1:n){
ranmat <- lapply(matrices, ran.unif, pred = params[,1],
prey = params[,2], random = T)
sampvals <- matrix(nrow = length(ranmat), ncol = 100)
for(j in 1:length(ranmat)){
sampvals[j,] <- ranmat[[j]]
}
eigs <- sapply(ranmat, maxRE)
eigenMATRIX.re[i,] <- Re(eigs)
eigenMATRIX.im[i,] <- Im(eigs)
samps[[i]] <- as.data.frame(sampvals)
}
svals <- cbind(n = rep(1:n, each = cols), rbindlist(samps))
return(list(samples = svals, ematrix.re = eigenMATRIX.re, ematrix.im = eigenMATRIX.im))
}
conversion <- function(tm){
for(i in 1:nrow(tm)){
for(j in 1:ncol(tm)){
if(tm[i,j] == 1){tm[j,i] <- -1}
}
}
return(tm)
}
randomQSS <- function(numweb = 200, chain = 9, total = 14, params){
require(NetIndices)
mywebs <- list()
for(j in 1:numweb){
check <- 1
while(!check == 0){
myweb <- matrix(0, nrow = 10, ncol = 10)
for(i in 1:chain){
myweb[i,i+1] <- 1
}
tophalf <- which(myweb[upper.tri(myweb)] == 0)
newones <- sample(tophalf, total-chain)
myweb[upper.tri(myweb)][newones] <- 1
mywebs[[j]] <- myweb
indeg <- apply(myweb, 1, sum)
outdeg <- apply(myweb, 2, sum)
deg <- indeg + outdeg
if(sum(deg == 0) >= 1){check <- 1}else{check <- 0}
}
}
mywebs1 <- lapply(mywebs, conversion)
myweb.tl <- lapply(mywebs, TrophInd)
emat <- eig.analysis(1000, mywebs1, params)
qss <- apply(emat$ematrix, 2, function(x){sum(x<0)/1000})
mtl <- sapply(myweb.tl, max)
return(list(samp = emat$samples, trophics = myweb.tl, eigs = emat, qss = qss, maxTL = mtl))
}
?diameter
randomQSS <- function(numweb = 200, chain = 9, total = 14, params){
require(NetIndices)
mywebs <- list()
for(j in 1:numweb){
check <- 1
while(!check == 0){
myweb <- matrix(0, nrow = 10, ncol = 10)
for(i in 1:chain){
myweb[i,i+1] <- 1
}
tophalf <- which(myweb[upper.tri(myweb)] == 0)
newones <- sample(tophalf, total-chain)
myweb[upper.tri(myweb)][newones] <- 1
mywebs[[j]] <- myweb
indeg <- apply(myweb, 1, sum)
outdeg <- apply(myweb, 2, sum)
deg <- indeg + outdeg
if(sum(deg == 0) >= 1){check <- 1}else{check <- 0}
}
}
diam <- lapply(lapply(mywebs, graph.adjacency), diameter)
mywebs1 <- lapply(mywebs, conversion)
myweb.tl <- lapply(mywebs, TrophInd)
emat <- eig.analysis(1000, mywebs1, params)
qss <- apply(emat$ematrix.re, 2, function(x){sum(x<0)/1000})
mtl <- sapply(myweb.tl, max)
return(list(samp = emat$samples, trophics = myweb.tl, eigs = emat, qss = qss, maxTL = mtl))
}
pars <- data.frame(pred = c(10, 10, 10, 5, 5, 5, 1, 1, 1), prey = c(-1, -5, -10, -1, -5, -10, -1, -5, -10))
ints <- c(12, 16, 20, 24, 28)
allpars <- expand.grid(pars[,1], pars[,2], ints)
i=1
system.time(
chain <- testLENGTH(webiter = 100, maxchain = 9, totalINT = allpars[i,3], params = allpars[i,1:2])
)
testLENGTH <- function(webiter = 200, maxchain = 9, totalINT = 14, params){
qssLIST <- list()
mtlLIST <- list()
troLIST <- list()
matvals <- list()
diam <- list()
for(i in 1:maxchain){
#cat(i, "\n")
test <- randomQSS(numweb = webiter, chain = i, total = totalINT, params = params)
qssLIST[[i]] <- test$qss
mtlLIST[[i]] <- test$maxTL
troLIST[[i]] <- lapply(test$trophics, function(x){x$TL})
matvals[[i]] <- test$samp
diam[[i]] <- test$diam
}
quas <- unlist(qssLIST)
maxtl <- unlist(mtlLIST)
meantl<- rapply(troLIST, mean)
medtl <- rapply(troLIST, median)
data <- data.frame(QSS = quas, MaxTL = maxtl, MeanTL = meantl, MedTL = medtl)
return(list(data = data, matrices = matvals))
}
system.time(
chain <- testLENGTH(webiter = 100, maxchain = 9, totalINT = allpars[i,3], params = allpars[i,1:2])
)
835/60
13*405
5265/60
/24
88/24
14*405
5670/60
94/24
