require(NetIndices)
mywebs <- list()
for(j in 1:numweb){
check <- 1
while(!check == 0){
myweb <- matrix(0, nrow = 10, ncol = 10)
for(i in 1:chain){
myweb[i,i+1] <- 1
}
tophalf <- which(myweb[upper.tri(myweb)] == 0)
newones <- sample(tophalf, total-chain)
myweb[upper.tri(myweb)][newones] <- 1
mywebs[[j]] <- myweb
indeg <- apply(myweb, 1, sum)
outdeg <- apply(myweb, 2, sum)
deg <- indeg + outdeg
if(sum(deg == 0) >= 1){check <- 1}else{check <- 0}
}
}
mywebs1 <- lapply(mywebs, conversion)
myweb.tl <- lapply(mywebs, TrophInd)
emat <- eig.analysis(1000, mywebs1, params)
qss <- apply(emat$ematrix, 2, function(x){sum(x<0)/1000})
mtl <- sapply(myweb.tl, max)
return(list(samp = emat$samples, trophics = myweb.tl, eigs = emat, qss = qss, maxTL = mtl))
}
?diameter
randomQSS <- function(numweb = 200, chain = 9, total = 14, params){
require(NetIndices)
mywebs <- list()
for(j in 1:numweb){
check <- 1
while(!check == 0){
myweb <- matrix(0, nrow = 10, ncol = 10)
for(i in 1:chain){
myweb[i,i+1] <- 1
}
tophalf <- which(myweb[upper.tri(myweb)] == 0)
newones <- sample(tophalf, total-chain)
myweb[upper.tri(myweb)][newones] <- 1
mywebs[[j]] <- myweb
indeg <- apply(myweb, 1, sum)
outdeg <- apply(myweb, 2, sum)
deg <- indeg + outdeg
if(sum(deg == 0) >= 1){check <- 1}else{check <- 0}
}
}
diam <- lapply(lapply(mywebs, graph.adjacency), diameter)
mywebs1 <- lapply(mywebs, conversion)
myweb.tl <- lapply(mywebs, TrophInd)
emat <- eig.analysis(1000, mywebs1, params)
qss <- apply(emat$ematrix.re, 2, function(x){sum(x<0)/1000})
mtl <- sapply(myweb.tl, max)
return(list(samp = emat$samples, trophics = myweb.tl, eigs = emat, qss = qss, maxTL = mtl))
}
pars <- data.frame(pred = c(10, 10, 10, 5, 5, 5, 1, 1, 1), prey = c(-1, -5, -10, -1, -5, -10, -1, -5, -10))
ints <- c(12, 16, 20, 24, 28)
allpars <- expand.grid(pars[,1], pars[,2], ints)
i=1
system.time(
chain <- testLENGTH(webiter = 100, maxchain = 9, totalINT = allpars[i,3], params = allpars[i,1:2])
)
testLENGTH <- function(webiter = 200, maxchain = 9, totalINT = 14, params){
qssLIST <- list()
mtlLIST <- list()
troLIST <- list()
matvals <- list()
diam <- list()
for(i in 1:maxchain){
#cat(i, "\n")
test <- randomQSS(numweb = webiter, chain = i, total = totalINT, params = params)
qssLIST[[i]] <- test$qss
mtlLIST[[i]] <- test$maxTL
troLIST[[i]] <- lapply(test$trophics, function(x){x$TL})
matvals[[i]] <- test$samp
diam[[i]] <- test$diam
}
quas <- unlist(qssLIST)
maxtl <- unlist(mtlLIST)
meantl<- rapply(troLIST, mean)
medtl <- rapply(troLIST, median)
data <- data.frame(QSS = quas, MaxTL = maxtl, MeanTL = meantl, MedTL = medtl)
return(list(data = data, matrices = matvals))
}
system.time(
chain <- testLENGTH(webiter = 100, maxchain = 9, totalINT = allpars[i,3], params = allpars[i,1:2])
)
835/60
13*405
5265/60
/24
88/24
14*405
5670/60
94/24
# Load required libraries ------------------
library(data.table)
library(igraph)
library(NetIndices)
# Load functions ---------------------------
ran.unif <- function(motmat, pred = 10, prey = -1, random = F){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, pred)}else if(x==-1){runif(1, prey, 0)} else{0}
})
if(random){
diag(newmat) <- runif(length(diag(newmat)), -1, 0)
}else{diag(newmat) <- -.1}
return(newmat)
}
maxRE <- function(rmat){
lam.max <- eigen(rmat)$values[which.max(Re(eigen(rmat)$values))]
return(lam.max)
}
eig.analysis <- function(n, matrices, params){
require(data.table)
dims <- dim(matrices[[1]])
cols <- length(matrices)
rows <- n
eigenMATRIX.re <- matrix(nrow = rows, ncol = cols)
eigenMATRIX.im <- matrix(nrow = rows, ncol = cols)
for(i in 1:n){
ranmat <- lapply(matrices, ran.unif, pred = params[,1],
prey = params[,2], random = F)
eigs <- sapply(ranmat, maxRE)
eigenMATRIX.re[i,] <- Re(eigs)
eigenMATRIX.im[i,] <- Im(eigs)
}
return(list(ematrix.re = eigenMATRIX.re, ematrix.im = eigenMATRIX.im))
}
conversion <- function(tm){
for(i in 1:nrow(tm)){
for(j in 1:ncol(tm)){
if(tm[i,j] == 1){tm[j,i] <- -1}
}
}
return(tm)
}
randomWEBS <- function(S = 10, numweb = 200, chain = 9, total = 14){
require(NetIndices)
require(igraph)
mywebs <- list()
for(j in 1:numweb){
check <- 1
while(!check == 0){
myweb <- matrix(0, nrow = S, ncol = S)
for(i in 1:chain){
myweb[i,i+1] <- 1
}
tophalf <- which(myweb[upper.tri(myweb)] == 0)
newones <- sample(tophalf, total-chain)
myweb[upper.tri(myweb)][newones] <- 1
mywebs[[j]] <- myweb
indeg <- apply(myweb, 1, sum)
outdeg <- apply(myweb, 2, sum)
deg <- indeg + outdeg
if(sum(deg == 0) >= 1){check <- 1}else{check <- 0}
}
}
return(mywebs)
}
randomQSS <- function(mywebs, params){
require(NetIndices)
require(igraph)
mywebs1 <- lapply(mywebs, conversion)
myweb.tl <- lapply(mywebs, TrophInd)
emat <- eig.analysis(1000, mywebs1, params)
qss <- apply(emat$ematrix.re, 2, function(x){sum(x<0)/1000})
maxtl <- sapply(myweb.tl, function(x){max(x$TL)})
meantl <- sapply(myweb.tl, function(x){mean(x$TL)})
medtl <- sapply(myweb.tl, function(x){median(x$TL)})
sdtl <- sapply(myweb.tl, function(x){sd(x$TL)})
diam <- sapply(lapply(mywebs, graph.adjacency), diameter)
web.dat <- data.frame(qss, diam, maxtl, meantl, medtl, sdtl)
return(web.dat)
}
nichetest <- niche_maker(50, 100, .1)
niche.model<-function(S,C){
new.mat<-matrix(0,nrow=S,ncol=S)
ci<-vector()
niche<-runif(S,0,1)
r<-rbeta(S,1,((1/(2*C))-1))*niche
for(i in 1:S){
ci[i]<-runif(1,r[i]/2,niche[i])
}
r[which(niche==min(niche))]<-.00000001
for(i in 1:S){
for(j in 1:S){
if(niche[j]>(ci[i]-(.5*r[i])) && niche[j]<(ci[i]+.5*r[i])){
new.mat[j,i]<-1
}
}
}
new.mat<-new.mat[,order(apply(new.mat,2,sum))]
return(new.mat)
}
niche_maker <- function(n, S, C){
niche.list <- list()
for (i in 1:n){
niche.list[[i]]<- niche.model(S, C)
}
return(niche.list)
}
nichetest <- niche_maker(50, 100, .1)
nicheqss <- randomQSS(webtest, matrix(c(1, -.01, 5, -1), nrow = 2, byrow = T))
nicheqss <- randomQSS(nichetest, matrix(c(1, -.01, 5, -1), nrow = 2, byrow = T))
getQSS <- function(webiter = 100, maxchain = 9, totalINT = 14, params, filepath){
require(doSNOW)
require(parallel)
require(data.table)
#make the cluster
cl <- makeCluster(detectCores()-1)
registerDoSNOW(cl)
RESULT <- foreach(i = 1:maxchain) %dopar% {
source("C:/Users/jjborrelli/Desktop/GitHub/Food-Chain-Length/robustnessFUNC.R")
#cat(i, "\n")
#rwebs <- randomWEBS(S = 10, numweb = webiter, chain = i, total = totalINT)
rwebs <- niche_maker(15, 10, totalINT)
rqss <- list()
for(j in 1:nrow(params)){
rqss[[j]] <- randomQSS(mywebs = rwebs, params = params[j,1:2])
rqss[[j]][[1]] <- cbind(C = rep(totalINT, nrow(rqss[[j]][[1]])),
mxch = rep(i, nrow(rqss[[j]][[1]])),
rqss[[j]][[1]],
par = rep(paste(params[j,], collapse = "/"),
nrow(rqss[[j]][[1]])))
rqss[[j]][[2]] <- cbind(C = rep(totalINT, nrow(rqss[[j]][[2]])),
mxch = rep(i, nrow(rqss[[j]][[2]])),
rqss[[j]][[2]],
par = rep(paste(params[j,], collapse = "/"),
nrow(rqss[[j]][[2]])))
cat("--", j, "\n")
}
rqss <- unlist(rqss, recursive = F)
web.dat.ls <- rbindlist(rqss[seq(1, length(rqss), 2)])
iter.dat.ls <- rbindlist(rqss[seq(2, length(rqss), 2)])
return(list(web.dat.ls, iter.dat.ls))
}
stopCluster(cl)
RESULT <- unlist(RESULT, recursive = F)
chain.data <- rbindlist(RESULT[seq(1, length(RESULT), 2)])
iter.data <- rbindlist(RESULT[seq(2, length(RESULT), 2)])
rm(RESULT)
write.csv(chain.data, file = paste(filepath, "/webdata-",
totalINT, ".csv", sep = ""),
row.names = F)
#write.csv(iter.data, file = paste(filepath, "/iterdata-",
#                                  totalINT, ".csv", sep = ""),
#          row.names = F)
return(chain.data)
}
niche.model
niche.model<-function(S,C){
require(igraph)
connected = FALSE
while(!connected){
new.mat<-matrix(0,nrow=S,ncol=S)
ci<-vector()
niche<-runif(S,0,1)
r<-rbeta(S,1,((1/(2*C))-1))*niche
for(i in 1:S){
ci[i]<-runif(1,r[i]/2,niche[i])
}
r[which(niche==min(niche))]<-.00000001
for(i in 1:S){
for(j in 1:S){
if(niche[j]>(ci[i]-(.5*r[i])) && niche[j]<(ci[i]+.5*r[i])){
new.mat[j,i]<-1
}
}
}
new.mat<-new.mat[,order(apply(new.mat,2,sum))]
connected <- is.connected(graph.adjacency(new.mat))
}
return(new.mat)
}
niche.model(10, .05)
is.connected(graph.adjacency(niche.model(10, .05)))
plot(graph.adjacency(niche.model(10, .05)))
library(NetIndices)
n <- niche.model(10, .05)
GenInd(n)
n <- niche.model(10, .12)
GenInd(n)
niche.model<-function(S,C){
new.mat<-matrix(0,nrow=S,ncol=S)
ci<-vector()
niche<-runif(S,0,1)
r<-rbeta(S,1,((1/(2*C))-1))*niche
for(i in 1:S){
ci[i]<-runif(1,r[i]/2,niche[i])
}
r[which(niche==min(niche))]<-.00000001
for(i in 1:S){
for(j in 1:S){
if(niche[j]>(ci[i]-(.5*r[i])) && niche[j]<(ci[i]+.5*r[i])){
new.mat[j,i]<-1
}
}
}
new.mat<-new.mat[,order(apply(new.mat,2,sum))]
return(new.mat)
}
n <- niche.model(10, .12)
GenInd(n)
n <- niche.model(10, .12)
GenInd(n)
n <- niche.model(10, .17)
GenInd(n)
n
sum(n)
niche_maker(20, 10, .15)
sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C})
hist(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
niche.model<-function(S,C){
require(igraph)
connected = FALSE
while(!connected){
new.mat<-matrix(0,nrow=S,ncol=S)
ci<-vector()
niche<-runif(S,0,1)
r<-rbeta(S,1,((1/(2*C))-1))*niche
for(i in 1:S){
ci[i]<-runif(1,r[i]/2,niche[i])
}
r[which(niche==min(niche))]<-.00000001
for(i in 1:S){
for(j in 1:S){
if(niche[j]>(ci[i]-(.5*r[i])) && niche[j]<(ci[i]+.5*r[i])){
new.mat[j,i]<-1
}
}
}
new.mat<-new.mat[,order(apply(new.mat,2,sum))]
connected <- is.connected(graph.adjacency(new.mat))
}
return(new.mat)
}
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .15), function(x){GenInd(x)$C}))
mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C}))
round(mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C})))
round(mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C})))
round(mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C})), 2)
round(mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C})), 2)
round(mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C})), 2)
round(mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C})), 2)
round(mean(sapply(niche_maker(20, 10, .28), function(x){GenInd(x)$C})), 2)
niche = T
!niche
getQSS <- function(webiter = 100, maxchain = 9, totalINT = 14, params, filepath, niche = FALSE){
require(doSNOW)
require(parallel)
require(data.table)
#make the cluster
cl <- makeCluster(detectCores()-1)
registerDoSNOW(cl)
RESULT <- foreach(i = 1:maxchain) %dopar% {
source("C:/Users/jjborrelli/Desktop/GitHub/Food-Chain-Length/robustnessFUNC.R")
#cat(i, "\n")
if(!niche){
rwebs <- randomWEBS(S = 10, numweb = webiter, chain = i, total = totalINT)
}else{
rwebs <- niche_maker(15, 10, totalINT)
}
rqss <- list()
for(j in 1:nrow(params)){
rqss[[j]] <- randomQSS(mywebs = rwebs, params = params[j,1:2])
rqss[[j]][[1]] <- cbind(C = rep(totalINT, nrow(rqss[[j]][[1]])),
mxch = rep(i, nrow(rqss[[j]][[1]])),
rqss[[j]][[1]],
par = rep(paste(params[j,], collapse = "/"),
nrow(rqss[[j]][[1]])))
rqss[[j]][[2]] <- cbind(C = rep(totalINT, nrow(rqss[[j]][[2]])),
mxch = rep(i, nrow(rqss[[j]][[2]])),
rqss[[j]][[2]],
par = rep(paste(params[j,], collapse = "/"),
nrow(rqss[[j]][[2]])))
cat("--", j, "\n")
}
rqss <- unlist(rqss, recursive = F)
web.dat.ls <- rbindlist(rqss[seq(1, length(rqss), 2)])
iter.dat.ls <- rbindlist(rqss[seq(2, length(rqss), 2)])
return(list(web.dat.ls, iter.dat.ls))
}
stopCluster(cl)
RESULT <- unlist(RESULT, recursive = F)
chain.data <- rbindlist(RESULT[seq(1, length(RESULT), 2)])
iter.data <- rbindlist(RESULT[seq(2, length(RESULT), 2)])
rm(RESULT)
write.csv(chain.data, file = paste(filepath, "/webdata-",
totalINT, ".csv", sep = ""),
row.names = F)
#write.csv(iter.data, file = paste(filepath, "/iterdata-",
#                                  totalINT, ".csv", sep = ""),
#          row.names = F)
return(chain.data)
}
ints <- c(12, 16, 20, 24, 28)
nichetest
pars <- data.frame(pred = c(10, 10, 10, 5, 5, 5, 1, 1, 1), prey = c(-1, -5, -10, -1, -5, -10, -1, -5, -10))
system.time(
for(con in 1:length(ints)){
getQSS(10, maxchain =7, totalINT = ints[con]/100, params = pars,
filepath = "C:/Users/jjborrelli/Desktop/CHAINDATA_ni2/")
cat(con/length(ints)*100, "%", "\n")
}
)
getQSS
system.time(
for(con in 1:length(ints)){
getQSS(10, maxchain =7, totalINT = ints[con]/100, params = pars,
filepath = "C:/Users/jjborrelli/Desktop/CHAINDATA_ni2/", niche = T)
cat(con/length(ints)*100, "%", "\n")
}
)
web.files <- list.files(path = "C:/Users/jjborrelli/Desktop/CHAINDATA_ni/", pattern = "web")
temp.ls <- list()
for(i in 1:length(web.files)){
temp.ls[[i]]<- fread(paste("C:/Users/jjborrelli/Desktop/CHAINDATA_ni/",
web.files[i], sep = ""))
}
webdata <- rbindlist(temp.ls)
webdata$C <- factor(webdata$C)
sem.l <- function(x){mean(x) - 1.96*sqrt(var(x)/length(x))}
sem.u <- function(x){mean(x) + 1.96*sqrt(var(x)/length(x))}
ggplot(webdata, aes(x = factor(diam+1), y = qss)) +
geom_point(alpha = .25, position = position_jitter(w=0.2), col = "grey58") +
stat_summary(fun.y="mean", geom="point") +
stat_summary(fun.ymin = sem.l, fun.y = "mean", fun.ymax = sem.u,
geom="errorbar", width = .2) +
#geom_smooth(method = "glm", aes(lty = C)) +
facet_grid(par~C) + theme_bw() +
xlab("Longest Food Chain Length") + ylab("Quasi sign-stability")
library(ggplot2)
ggplot(webdata, aes(x = factor(diam+1), y = qss)) +
geom_point(alpha = .25, position = position_jitter(w=0.2), col = "grey58") +
stat_summary(fun.y="mean", geom="point") +
stat_summary(fun.ymin = sem.l, fun.y = "mean", fun.ymax = sem.u,
geom="errorbar", width = .2) +
#geom_smooth(method = "glm", aes(lty = C)) +
facet_grid(par~C) + theme_bw() +
xlab("Longest Food Chain Length") + ylab("Quasi sign-stability")
nicheqss <- randomQSS(nichetest, matrix(c(1, -.01, 5, -1), nrow = 2, byrow = T))
nicheqss
nicheqss <- randomQSS(nichetest, matrix(c(5, -1), nrow = 2, byrow = T))
nicheqss <- randomQSS(nichetest, matrix(c(5, -1), nrow = 1))
nicheqss
sapply(nichetest, function(x){GenInd(x)$C})
ran.unif <- function(motmat, pred = 10, prey = -1, random = F){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, pred)}else if(x==-1){runif(1, prey, 0)} else{0}
})
if(random){
diag(newmat) <- runif(length(diag(newmat)), -1, 0)
}else{diag(newmat) <- -1}
return(newmat)
}
system.time(
nicheqss <- randomQSS(nichetest, matrix(c(5, -1), nrow = 1))
)
??characteristic
??polynomial
nicheqss
??routh
m <- matrix(rnorm(9), nrow = 3)
m
diag(m) <- -1
m
det(m)
max(Re(eigen(m)$values))
trace(m)
tr(m)
?trace
??trace
install.packages("matrixcalc")
library(matrixcalc)
matrix.trace(m)
det(m)
nichetest <- niche_maker(50, 100, .05)
nichetest <- niche_maker(50, 100, .05)
nichetest2 <- niche_maker(50, 100, .1)
nichetest3 <- niche_maker(50, 50, .1)
nicheqss <- randomQSS(nichetest, matrix(c(1, -1), nrow = 1))
nicheqss2 <- randomQSS(nichetest2, matrix(c(1, -1), nrow = 1))
nicheqss3 <- randomQSS(nichetest3, matrix(c(1, -1), nrow = 1))
nicheqss.1 <- randomQSS(nichetest, matrix(c(3, -1), nrow = 1))
nicheqss2.1 <- randomQSS(nichetest2, matrix(c(3, -1), nrow = 1))
nicheqss3.1 <- randomQSS(nichetest3, matrix(c(3, -1), nrow = 1))
nicheqss
nicheqss2
nicheqss3
nicheqss.1
nicheqss2.1
nicheqss3.1
nicheqss
plot(qss~diam, data - nicheqss)
plot(qss~diam, data = nicheqss)
plot(qss~maxtl, data = nicheqss)
plot(qss~maxtl, data = nicheqss.1)
plot(qss~diam, data = nicheqss.1)
plot(qss~maxtl, data = nicheqss.1)
plot(qss~meantl, data = nicheqss.1)
plot(qss~medtl, data = nicheqss.1)
plot(qss~sdtl, data = nicheqss.1)
